from django.db import models


# Create your models here.

class Env(models.Model):
    """环境信息表"""

    hwinfo_machineinfo_manufacturer = models.CharField(max_length=50, verbose_name='manufacturer')
    hwinfo_machineinfo_product = models.CharField(max_length=50, verbose_name='product')
    hwinfo_machineinfo_serialnumber = models.CharField(max_length=255, verbose_name='serialnumber')
    hwinfo_bios_vendor = models.CharField(max_length=50, verbose_name='vendor')
    hwinfo_bios_version = models.CharField(max_length=50, verbose_name='version')
    hwinfo_cpu_Vendor_ID = models.CharField(max_length=50, verbose_name='Vendor ID')
    hwinfo_cpu_CPU_family = models.IntegerField(verbose_name='CPU family')
    hwinfo_cpu_model_name = models.CharField(max_length=50, verbose_name='model_name')
    hwinfo_cpu_CPU_MHz = models.TextField(max_length=100, verbose_name='CPU MHz')
    hwinfo_cpu_CPUs = models.IntegerField(verbose_name='CPU(s)')
    hwinfo_cpu_Threads_per_core = models.IntegerField(verbose_name='Thread(s) per core')
    hwinfo_cpu_CPU_Arch = models.CharField(max_length=50, verbose_name='CPU Arch')
    hwinfo_cpu_CPU_op_mode = models.CharField(max_length=50, verbose_name='CPU op-mode')
    hwinfo_cpu_Byte_Order = models.CharField(max_length=50, verbose_name='Byte Order')
    hwinfo_cpu_On_line_CPUs_list = models.CharField(max_length=50, verbose_name='On-line CPU(s) list')
    hwinfo_cpu_Virtualization = models.CharField(max_length=50, blank=True, null=True, verbose_name='Virtualization')
    hwinfo_cpu_Virtualization_type = models.CharField(max_length=50, verbose_name='Virtualization type')
    hwinfo_cpu_L1d_cache = models.CharField(max_length=50, verbose_name='L1d cache:')
    hwinfo_cpu_L1i_cache = models.CharField(max_length=50, verbose_name='L1i cache')
    hwinfo_cpu_L2_cache = models.CharField(max_length=50, verbose_name='L2 cache')
    hwinfo_cpu_L3_cache = models.CharField(max_length=50, verbose_name='L3 cache')
    hwinfo_memory_Flags = models.TextField(verbose_name='Flags')
    hwinfo_memory_vendor = models.TextField(verbose_name='vendor')
    hwinfo_memory_mem_type = models.CharField(max_length=50, verbose_name='mem_type')
    hwinfo_memory_total_size = models.CharField(max_length=50, verbose_name='total_size')
    hwinfo_memory_mem_used = models.CharField(max_length=50, verbose_name='mem_used')
    hwinfo_memory_mem_count = models.IntegerField(verbose_name='mem_count')
    hwinfo_memory_mem_free = models.CharField(max_length=50, verbose_name='mem_free')
    hwinfo_memory_mem_freq = models.CharField(max_length=50, verbose_name='mem_freq')
    hwinfo_memory_swap = models.CharField(max_length=50, verbose_name='swap')
    # disk可能有多组的情况，所以在里直接把所有disk的json数据集体存入后期在做list化处理拿数据
    hwinfo_disk = models.TextField(verbose_name='disk', default="")
    # hwinfo_disk_name = models.CharField(max_length=50, verbose_name='name')
    # hwinfo_disk_part_type = models.CharField(max_length=50, verbose_name='part_type')
    # hwinfo_disk_vendor = models.CharField(max_length=50, verbose_name='vendor')
    # hwinfo_disk_model = models.CharField(max_length=50, verbose_name='model')
    # hwinfo_disk_size = models.CharField(max_length=50, verbose_name='size')
    # hwinfo_disk_rota = models.CharField(max_length=50, verbose_name='rota')
    # hwinfo_disk_sched = models.CharField(max_length=50, verbose_name='sched')
    # hwinfo_disk_rq_size = models.CharField(max_length=50, verbose_name='rq_size')
    # hwinfo_disk_tran = models.CharField(max_length=50, verbose_name='tran')
    # hwinfo_disk_mntpoint = models.CharField(max_length=50, verbose_name='mntpoint=/')
    # hwinfo_disk_mntpoint_home = models.CharField(max_length=50, verbose_name='mntpoint=/home')
    hwinfo_nicinfo = models.TextField(verbose_name='nicinfo', default="")
    # hwinfo_nicinfo_logicalname = models.CharField(max_length=250, verbose_name='logicalname')
    # hwinfo_nicinfo_product = models.CharField(max_length=50, verbose_name='product')
    # hwinfo_nicinfo_speed = models.CharField(max_length=50, verbose_name='speed')
    swinfo_os_curr_UTC_time = models.CharField(max_length=50, verbose_name='curr UTC time')
    swinfo_os_os_id = models.CharField(max_length=50, verbose_name='os_id')
    swinfo_os_os_arch = models.CharField(max_length=50, verbose_name='os_arch')
    swinfo_os_osversion = models.CharField(max_length=50, verbose_name='osversion')
    swinfo_os_kernel = models.TextField(verbose_name='kernel')
    swinfo_os_grub = models.TextField(verbose_name='grub')
    swinfo_runtime_sysconf = models.TextField(verbose_name='sysconf')
    swinfo_runtime_sysctl = models.TextField(verbose_name='sysctl')
    swinfo_runtime_systemctlinfo = models.TextField(verbose_name='systemctlinfo')
    swinfo_runtime_driverinfo = models.TextField(verbose_name='driverinfo')
    swinfo_runtime_rpmlist = models.TextField(verbose_name='rpmlist')
    swinfo_runtime_ipclist = models.TextField(verbose_name='ipclist')
    swinfo_runtime_selinux_status = models.CharField(max_length=50, verbose_name='selinux_status')
    swinfo_runtime_power_status = models.CharField(max_length=50, verbose_name='power_status')
    swinfo_runtime_cpu_sched = models.CharField(max_length=50, verbose_name='cpu_sched')
    swinfo_runtime_loadavg = models.CharField(max_length=50, verbose_name='loadavg')
    swinfo_runtime_uptime = models.CharField(max_length=50, verbose_name='uptime')
    swinfo_software_ver_gccversion = models.CharField(max_length=50, verbose_name='gccversion')
    swinfo_software_ver_glibcversion = models.CharField(max_length=50, verbose_name='glibcversion')
    swinfo_software_ver_javaversion = models.TextField(verbose_name='javaversion')
    swinfo_software_ver_g_version = models.CharField(max_length=50, verbose_name='g++version')
    swinfo_software_ver_gfortranversion = models.CharField(max_length=50, verbose_name='gfortranversion')
    swinfo_software_ver_pythonversion = models.CharField(max_length=50, verbose_name='pythonversion')
    nwinfo_nic = models.TextField(verbose_name='nic', default="")
    # nwinfo_nic_nicname = models.CharField(max_length=50, verbose_name='nicname')
    # nwinfo_nic_ip = models.GenericIPAddressField(verbose_name='ip')
    # nwinfo_nic_hwaddr = models.CharField(max_length=50, verbose_name='hwaddr')
    # nwinfo_nic_gateway = models.CharField(max_length=50, verbose_name='gateway')
    # nwinfo_nic_mtu = models.IntegerField(verbose_name='mtu')

    class Meta:
        db_table = 'env'